generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Jobseeker {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  email          String           @unique
  password       String
  phone          String? // Optional
  resume         String? // Store resume as a URL or a file path
  profileimg     String?
  jobPreference  JobPreference
  skills         String[] // Array of skills (e.g., programming languages, tools)
  education      Education[] // Relation to education history
  workExperience WorkExperience[] // Relation to work experience
  location       String? // Optional, to indicate the jobseeker's location
  aboutMe        String? // Optional bio or summary about the jobseeker
  linkedIn       String? // Optional link to LinkedIn profile
  website        String? // Optional personal website or portfolio link
  availability   Boolean?
  category       JobCategory? // Optional, indicates if the jobseeker is currently available for work
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  applications   Application[] // Relation to applications
  savedJob       SavedJob[]
}

// Define additional models for Education and WorkExperience
model Education {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  jobseeker    Jobseeker @relation(fields: [jobseekerId], references: [id])
  jobseekerId  String    @db.ObjectId
  institution  String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
}

model WorkExperience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  jobseeker        Jobseeker @relation(fields: [jobseekerId], references: [id])
  jobseekerId      String    @db.ObjectId
  company          String
  position         String
  startDate        DateTime
  endDate          DateTime?
  responsibilities String[] // Array of responsibilities or achievements
}

enum JobPreference {
  FULL_TIME
  PART_TIME
  REMOTE
  CONTRACT
}

model Employer {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String          @unique
  password       String
  companyWebsite String?
  phoneNumber    String?
  industry       String?
  companySize    Int?
  companyLogo    String?
  emailVerified  DateTime?
  image          String?
  aboutcompany   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  jobs           Job[]           @relation("EmployerJobs")
  draftSavedjobs DraftSavedJob[] @relation("EmployerDraftJobs")
  applications   Application[] // Relation to applications received
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

enum ApplicationMethod {
  APPLY_VIA_WEBSITE
  APPLY_VIA_EMAIL
  APPLY_VIA_PLATFORM
}

enum JobCategory {
  IT
  HEALTHCARE
  MARKETING
  FINANCE
  EDUCATION
  OTHER // Add other categories as needed
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum EmploymentType {
  PERMANENT
  TEMPORARY
  CONTRACT
}

// New Application model
model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  jobId       String            @map("job_id") @db.ObjectId
  jobseekerId String            @map("jobseeker_id") @db.ObjectId
  status      ApplicationStatus @default(PENDING) // Status of the application
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  job        Job       @relation(fields: [jobId], references: [id])
  jobseeker  Jobseeker @relation(fields: [jobseekerId], references: [id])
  employer   Employer  @relation(fields: [employerId], references: [id])
  employerId String    @db.ObjectId

  @@unique([jobseekerId, jobId])
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  REJECTED
}

// Job model remains unchanged
model Job {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  employerId          String             @map("employer_id") @db.ObjectId
  title               String?
  description         String? // Can be rich text if needed
  jobType             JobType
  location            String // Can reference a separate Location model if needed
  salaryMin           Float?
  salaryMax           Float?
  salaryNegotiable    Boolean?           @default(false)
  jobstatus           JobStatus?
  jobstatuschangedby  String?
  category            JobCategory?
  experienceLevel     ExperienceLevel?
  skills              String[] // Array for multi-select skills
  applicationDeadline DateTime?
  employmentType      EmploymentType?
  benefits            String? // Can be text or JSON for structured benefits
  aboutCompany        String? // Pre-filled from employer's profile
  applyMethod         ApplicationMethod?
  applyUrl            String? // Conditional field for apply via website
  applyEmail          String? // Conditional field for apply via email
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  employer    Employer      @relation("EmployerJobs", fields: [employerId], references: [id])
  application Application[]
  savedJob    SavedJob[]
}

enum JobStatus {
  PENDING
  APPROVED
  REJECTED
}

model DraftSavedJob {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  employerId          String             @map("employer_id") @db.ObjectId
  title               String?
  description         String? // Can be rich text if needed
  jobType             JobType?
  location            String // Can reference a separate Location model if needed
  salaryMin           Float?
  salaryMax           Float?
  salaryNegotiable    Boolean?           @default(false)
  category            JobCategory?
  experienceLevel     ExperienceLevel?
  skills              String[] // Array for multi-select skills
  applicationDeadline DateTime?
  employmentType      EmploymentType?
  benefits            String? // Can be text or JSON for structured benefits
  aboutCompany        String? // Pre-filled from employer's profile
  applyMethod         ApplicationMethod?
  applyUrl            String? // Conditional field for apply via website
  applyEmail          String? // Conditional field for apply via email
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  isfinal             Boolean?           @default(false)
  employer            Employer           @relation("EmployerDraftJobs", fields: [employerId], references: [id])
}

model SavedJob {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId       String   @map("job_id") @db.ObjectId
  jobseekerId String   @map("jobseeker_id") @db.ObjectId
  savedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt

  job       Job       @relation(fields: [jobId], references: [id])
  jobseeker Jobseeker @relation(fields: [jobseekerId], references: [id])

  @@unique([jobseekerId, jobId])
}
