import { db } from "@/lib/db";
import { getSession } from "@/lib/jobseekerauth";
import nodemailer from "nodemailer";
import bcrypt from "bcryptjs"; // For password hashing
import { generateText } from "ai";
import { google } from "@ai-sdk/google";
import { cookies } from "next/headers"; // Import cookies from next/headers

// Function to handle POST requests
export async function POST(req) {
  let loggeduser = await getSession(); // Check for logged-in user
  const formData = await req.json(); // Form data from the request body
  const email = loggeduser?.email || formData?.email; // Use logged user's email or formData email

  try {
    // Check if Jobseeker exists based on email
    let jobseeker = await db.Jobseeker.findUnique({
      where: { email },
    });

    // If jobseeker doesn't exist, create a new Jobseeker and send a password email
    if (!jobseeker) {
      const password = generateRandomPassword();
      const hashedPassword = await bcrypt.hash(password, 10); // Hash the password before saving
      jobseeker = await db.Jobseeker.create({
        data: {
          email,
          fullName: loggeduser?.fullName || "New Jobseeker", // Use logged user's full name or fallback
          password: hashedPassword, // Store hashed password
        },
      });

      // Send password to email using nodemailer
      await sendPasswordToEmail(email, password);

      // Set cookies for jobseeker ID and email
      const headers = new Headers();
      headers.append(
        "Set-Cookie",
        `jobseekerId=${jobseeker.id}; HttpOnly; Path=/; Secure; SameSite=Strict`
      );
      headers.append(
        "Set-Cookie",
        `email=${email}; HttpOnly; Path=/; Secure; SameSite=Strict`
      );

      return new Response(
        JSON.stringify({
          message: "Jobseeker created and password sent to email!",
        }),
        {
          status: 201,
          headers,
        }
      );
    }
    const emailCookie = cookies().get("email");
    if (!emailCookie || !emailCookie.value) {
      throw new Error("Email cookie not found");
    }
    const newemail = emailCookie.value;
    
    // Find the jobseeker using the email
    const newjobseeker = await db.Jobseeker.findUnique({
      where: { email : newemail },
    });
    
    const newjobseekerid = newjobseeker.id
    // Now, check if the jobseeker has an associated resume
    let resume = await db.AIResumeGeneratedData.findFirst({
      where: { jobseekerId: jobseeker.id }, // Find the first record with this jobseekerId
    });

    // Parse the form data from the request body (client data)
    if (resume) {
      // Resume exists, so we edit it
      const generatedData = await generateGeminiEnhancedResume(formData);
      await updateAIResumeGeneratedData(resume, generatedData);

      return new Response(
        JSON.stringify({ message: "Resume updated successfully!" }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    } else {
      // Resume doesn't exist, create a new one
      const generatedData = await generateGeminiEnhancedResume(formData);
      await saveAIResumeGeneratedData(jobseeker.id, generatedData);

      return new Response(
        JSON.stringify({ message: "Resume generated and saved successfully!" }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  } catch (error) {
    console.error("Error generating or saving resume:", error);

    return new Response(
      JSON.stringify({
        message: "Internal Server Error",
        error: error.message,
      }),
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  }
}

// Function to generate AI-enhanced resume data using Gemini
async function generateGeminiEnhancedResume(formData) {
  const prompt = `Enhance the following resume details. Improve phrasing, add a professional tone, and summarize effectively. Add relevant sections like hobbies and responsibilities based on skills and work experience. Return only the following JSON object, and ensure it is valid. Ensure spacing between each section, especially in the 'About Me' and 'Responsibilities' sections for clarity. Avoid any raw text or unnecessary characters.

  {
    "firstName": "< First Name>",
     "lastName": "<Last Name>",
    "email": "<Email>",
    "phone": "<Phone>",
    "aboutMe": "<Enhanced About Me paragraph with clear spacing and justification>",
    "education": [
  {
    "institution": "",
    "degree": "",
    "fieldOfStudy": "",
    "year": "",
    "percentage": "",
    "university": "",
    "city": "",
    "Gradingsystem": "",
    "grade": ""
  }
],
"workExperience": [
  {
    "company": "",
    "position": "",
    "duration": "",
    "responsibilities": "<write responsibilities according to the role position>",
    "fromDate": "",
    "toDate": "",
    "location": "",
    "department": "",
    "teamSize": "",
    "positionsUnderYou": "",
    "hadTeam": ""
  }
]
    "skills": "<Comma-separated list of skills with appropriate structure>",
    "hobbies": "<Comma-separated list of hobbies>",
    "certifications": [{"name": "<Certification Name>", "organization": "<Organization>", "year": "<Year>"}],
    "address": {"street": "<Street>", "city": "<City>", "state": "<State>", "zip": "<Zip Code>"}
  }
  Input:
  ${JSON.stringify(formData)}
  `;

  try {
    const { text } = await generateText({
      model: google("gemini-1.5-pro-latest"),
      prompt,
      options: { timeout: 60000 },
    });

    const cleanedText = cleanResponse(text);

    const parsedResponse = JSON.parse(cleanedText);

    if (
      parsedResponse &&
      parsedResponse.firstName &&
      parsedResponse.email &&
      parsedResponse.education &&
      parsedResponse.workExperience
    ) {
      return parsedResponse;
    } else {
      throw new Error("Generated JSON is missing required fields.");
    }
  } catch (error) {
    console.error("Error during AI resume generation:", error);
    return formData; // Fallback to original data on error
  }
}

// Function to clean unwanted characters like backticks, newlines, etc.
function cleanResponse(response) {
  return response
    .replace(/[`]/g, "") // Remove backticks
    .replace(/^json/, "") // Remove 'json' prefix if present
    .trim();
}

// Function to save AI-enhanced resume data to the database
async function saveAIResumeGeneratedData(jobseekerId, newjobseekerid , generatedData) {
  try {
  const  finaljobseekerid = jobseekerId || newjobseekerid
    await db.AIResumeGeneratedData.create({
      data: {
        jobseekerId : finaljobseekerid,
        firstName: generatedData.firstName,
        lastName: generatedData.lastName,
        email: generatedData.email,
        phone: generatedData.phone,
        aboutMe: generatedData.aboutMe,
        skills: generatedData.skills,
        hobbies: generatedData.hobbies,
        certifications: generatedData.certifications,
        addressStreet: generatedData.address?.street,
        addressCity: generatedData.address?.city,
        addressState: generatedData.address?.state,
        addressZip: generatedData.address?.zip,
        education: JSON.stringify(generatedData.education),
        workExperience: JSON.stringify(generatedData.workExperience),
      },
    });

    console.log("Resume data saved successfully to the database!");
  } catch (error) {
    console.error("Error saving resume data to database:", error);
    throw new Error("Failed to save resume data.");
  }
}

// Function to update existing AI-enhanced resume data in the database
async function updateAIResumeGeneratedData(resume, generatedData) {
  try {
    await db.AIResumeGeneratedData.update({
      where: { id: resume.id },
      data: {
        firstName: generatedData.firstName,
        lastName: generatedData.lastName,
        email: generatedData.email,
        phone: generatedData.phone,
        aboutMe: generatedData.aboutMe,
        skills: generatedData.skills,
        hobbies: generatedData.hobbies,
        certifications: generatedData.certifications,
        addressStreet: generatedData.address?.street,
        addressCity: generatedData.address?.city,
        addressState: generatedData.address?.state,
        addressZip: generatedData.address?.zip,
        education: JSON.stringify(generatedData.education),
        workExperience: JSON.stringify(generatedData.workExperience),
      },
    });

    console.log("Resume data updated successfully in the database!");
  } catch (error) {
    console.error("Error updating resume data in database:", error);
    throw new Error("Failed to update resume data.");
  }
}

// Function to generate a random password (you can adjust this method)
function generateRandomPassword() {
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
  let password = "";
  for (let i = 0; i < 12; i++) {
    password += characters.charAt(
      Math.floor(Math.random() * characters.length)
    );
  }
  return password;
}

// Function to send password to email using nodemailer
async function sendPasswordToEmail(email, password) {
  const transporter = nodemailer.createTransport({
    service: "gmail", // You can use any service like SendGrid or SMTP
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS, // You should use environment variables for security
    },
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: email,
    subject: "Your Peperk resume - Jobseeker Account Password",
    text: `Welcome to the platform! Your account has been created. Here is your password: ${password}`,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log("Password sent to email!");
  } catch (error) {
    console.error("Error sending email:", error);
  }
}
